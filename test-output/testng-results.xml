<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="8" passed="8">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="80" started-at="2016-01-18T02:45:01Z" finished-at="2016-01-18T02:45:01Z">
    <groups>
      <group name="systemtest">
        <method signature="GroupTest.testLogin()[pri:0, instance:lesson2.GroupTest@a06514b]" name="testLogin" class="lesson2.GroupTest"/>
      </group> <!-- systemtest -->
      <group name="functiontest">
        <method signature="GroupTest.testOpenPage()[pri:0, instance:lesson2.GroupTest@a06514b]" name="testOpenPage" class="lesson2.GroupTest"/>
      </group> <!-- functiontest -->
    </groups>
    <test name="Default test" duration-ms="80" started-at="2016-01-18T02:45:01Z" finished-at="2016-01-18T02:45:01Z">
      <class name="lesson2.StringUtilsTest">
        <test-method status="PASS" signature="isEmpty()[pri:0, instance:lesson2.StringUtilsTest@7bd1a567]" name="isEmpty" duration-ms="16" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isEmpty -->
        <test-method status="PASS" signature="trim()[pri:0, instance:lesson2.StringUtilsTest@7bd1a567]" name="trim" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- trim -->
      </class> <!-- lesson2.StringUtilsTest -->
      <class name="lesson2.GroupTest">
        <test-method status="PASS" signature="testLogin()[pri:0, instance:lesson2.GroupTest@a06514b]" name="testLogin" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogin -->
        <test-method status="PASS" signature="testOpenPage()[pri:0, instance:lesson2.GroupTest@a06514b]" name="testOpenPage" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpenPage -->
      </class> <!-- lesson2.GroupTest -->
      <class name="lesson2.TestNGlearn01">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:lesson2.TestNGlearn01@54397c28]" name="beforeClass" is-config="true" duration-ms="4" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="TestNgLearn()[pri:0, instance:lesson2.TestNGlearn01@54397c28]" name="TestNgLearn" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestNgLearn -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:lesson2.TestNGlearn01@54397c28]" name="afterClass" is-config="true" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- lesson2.TestNGlearn01 -->
      <class name="lesson2.TestngAnnotation">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="beforeSuite" is-config="true" duration-ms="14" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="beforeTest" is-config="true" duration-ms="0" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="beforeClass" is-config="true" duration-ms="0" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="testCase1()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="testCase1" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase1 -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testCase2()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="testCase2" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="afterClass" is-config="true" duration-ms="1" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="afterTest" is-config="true" duration-ms="0" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:lesson2.TestngAnnotation@24b9371e]" name="afterSuite" is-config="true" duration-ms="0" started-at="2016-01-18T10:45:02Z" finished-at="2016-01-18T10:45:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- lesson2.TestngAnnotation -->
      <class name="lesson2.ExceptionTest">
        <test-method status="PASS" signature="testException()[pri:0, instance:lesson2.ExceptionTest@c24cb3]" name="testException" duration-ms="0" started-at="2016-01-18T10:45:01Z" finished-at="2016-01-18T10:45:01Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[NullPoint]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: NullPoint
	at lesson2.ExceptionTest.testException(ExceptionTest.java:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:112)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:205)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:176)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testException -->
      </class> <!-- lesson2.ExceptionTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
